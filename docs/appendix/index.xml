<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第四部分 附录 on 网络学习笔记</title>
    <link>https://ikingye.github.io/study-network/docs/appendix/</link>
    <description>Recent content in 第四部分 附录 on 网络学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ikingye.github.io/study-network/docs/appendix/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>4.1 教程</title>
      <link>https://ikingye.github.io/study-network/docs/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/appendix/tutorial/</guid>
      <description>教程 #  基础 #  进阶 #  </description>
    </item>
    
    <item>
      <title>4.2 面试题</title>
      <link>https://ikingye.github.io/study-network/docs/appendix/interview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/appendix/interview/</guid>
      <description>计算机网络面试题 #  基础题 #  进阶题 #  </description>
    </item>
    
    <item>
      <title>4.3 关注项目</title>
      <link>https://ikingye.github.io/study-network/docs/appendix/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/appendix/attention/</guid>
      <description>关注 #  其他 #  netty/netty #  Netty project - an event-driven asynchronous network application framework http://netty.io/
libuv/libuv #  Cross-platform asynchronous I/O https://libuv.org/
panjf2000/gnet #  gnet 是一个基于事件驱动的高性能和轻量级网络框架。它直接使用 epoll 和 kqueue 系统调用而非标准 Go 网络包：net 来构建网络应用，它的工作原理类似两个开源的网络库：netty/netty 和 libuv/libuv 。
gnet 设计开发的初衷不是为了取代 Go 的标准网络库：net，而是为了创造出一个类似于 antirez/redis 、haproxy/haproxy 能高效处理网络包的 Go 语言网络服务器框架。
gnet 的卖点在于它是一个高性能、轻量级、非阻塞的纯 Go 实现的传输层（TCP/UDP/Unix Domain Socket）网络框架，开发者可以使用 gnet 来实现自己的应用层网络协议 (HTTP、RPC、Redis、WebSocket 等等)，从而构建出自己的应用层网络应用：比如在 gnet 上实现 HTTP 协议就可以创建出一个 HTTP 服务器 或者 Web 开发框架，实现 Redis 协议就可以创建出自己的 Redis 服务器等等。</description>
    </item>
    
  </channel>
</rss>