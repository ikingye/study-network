<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>首页 on 网络学习笔记</title>
    <link>https://ikingye.github.io/study-network/</link>
    <description>Recent content in 首页 on 网络学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ikingye.github.io/study-network/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>4.1 教程</title>
      <link>https://ikingye.github.io/study-network/docs/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/appendix/tutorial/</guid>
      <description>教程 #  基础 #  进阶 #  </description>
    </item>
    
    <item>
      <title>iptables</title>
      <link>https://ikingye.github.io/study-network/docs/basic/cmd/iptables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/basic/cmd/iptables/</guid>
      <description>iptables #  Linux 的包过滤功能，即 Linux 防火墙， 它由 netfilter 和 iptables 两个组件组成。 netfilter 组件也称为内核空间，是内核的一部分，由一些信息包过滤表组成，这些表包含内核用来控制信息包过滤处理的规则集。 iptables 组件是一种工具，位于用户空间，它使插入、修改和除去信息包过滤表中的规则变得容易。
iptables 是 linux 系统下用来配置 netfilter 子系统的一个 client tool。
iptables 其实不是真正的防火墙，我们可以把它理解成一个客户端代理，用户通过 iptables 这个代理，将用户的安全设定执行到对应的 &amp;ldquo;安全框架&amp;rdquo; 中， 这个 &amp;ldquo;安全框架&amp;rdquo; 才是真正的防火墙，这个框架的名字叫 netfilter
配套的常用命令有：
 iptables: 对表、链、规则进行配置 iptables-save: dump 已配置的规则，可以用 &amp;gt; 重定向到一个文件中 iptables-restore: 从之前导出的 iptable 规则配置文件加载规则。   基础命令 #  iptables [ -t 表名] 命令选项 [链名] [条件匹配] [-j 目标动作或跳转]
 原理 #   一个数据包进入网卡时，它首先进入 PREROUTING 链，内核根据数据包目的 IP 判断是否需要转发出去 如果数据包就是进入本机的，它就会沿着图向下移动，到达 INPUT 链 数据包到了 INPUT 链后，任何进程都会收到它。 如果数据包是要转发出去的，且内核允许转发，数据包就会如图所示向右移动，经过 FORWARD 链， 然后到达 POSTROUTING 链输出。 本机上运行的程序可以发送数据包，这些数据包会经 过 OUTPUT 链 然后到达 POSTROUTING 链输出   状态 #  ESTABLISHED #  状态 ESTABLISHED 指出该信息包属于已建立的连接，该连接一直用于发送和接收信息包并且完全有效。</description>
    </item>
    
    <item>
      <title>netfilter</title>
      <link>https://ikingye.github.io/study-network/docs/basic/cmd/netfilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/basic/cmd/netfilter/</guid>
      <description>netfilter #  </description>
    </item>
    
    <item>
      <title>TCP</title>
      <link>https://ikingye.github.io/study-network/docs/basic/protocol/tcp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/basic/protocol/tcp/</guid>
      <description>TCP #  TCP 报文格式 #   序号：Seq 序号，占 32 位，用来标识从 TCP 源端向目的端发送的字节流，发起方发送数据时对此进行标记。 确认序号：Ack 序号，占 32 位，只有 ACK 标志位为 1 时，确认序号字段才有效，Ack=Seq+1。 标志位：共 6 个，即 URG、ACK、PSH、RST、SYN、FIN 等，具体含义如下：  URG：紧急指针（urgent pointer）有效。 ACK：确认序号有效。 PSH：接收方应该尽快将这个报文交给应用层。 RST：重置连接。 SYN：发起一个新连接。 FIN：释放一个连接。    三次握手 #  四次挥手 #  实际中还会出现同时发起主动关闭的情况
 TCP 有限状态机 #  The TCP Finite State Machine (FSM)

 TCP 状态变迁图 #  
 TCP 是全双工的 #   TCP 的 RTT 算法 #  经典算法（RFC793） #    首先，先采样 RTT，记下最近好几次的 RTT 值。</description>
    </item>
    
    <item>
      <title>Wireshark</title>
      <link>https://ikingye.github.io/study-network/docs/advanced/tool/wireshark/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/advanced/tool/wireshark/</guid>
      <description>Wireshark #  查询 #  ip.addr == 192.168.137.109 MacOS 打开两个 Wireshark #  # 使用 -n 可以打开多个 open -n /Applications/Wireshark.app 参考：
 Open Multiple Instances of Wireshark on MacOS  </description>
    </item>
    
    <item>
      <title>UDP</title>
      <link>https://ikingye.github.io/study-network/docs/basic/protocol/udp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/basic/protocol/udp/</guid>
      <description>UDP #  </description>
    </item>
    
    <item>
      <title>4.2 面试题</title>
      <link>https://ikingye.github.io/study-network/docs/appendix/interview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/appendix/interview/</guid>
      <description>计算机网络面试题 #  基础题 #  进阶题 #  </description>
    </item>
    
    <item>
      <title>DNS</title>
      <link>https://ikingye.github.io/study-network/docs/basic/protocol/dns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/basic/protocol/dns/</guid>
      <description>DNS #  /etc/hosts #  hosts 文件是 Linux 系统中一个负责 IP 地址与域名快速解析的文件
/etc/resolv.conf #  该文件是 DNS 域名解析的配置文件，它的格式很简单， 每行以一个关键字开头，后接配置参数。
resolv.conf 的关键字主要有四个：
 nameserver # 定义 DNS 服务器的 IP 地址 domain # 定义本地域名 search # 定义域名的搜索列表 sortlist # 对返回的域名进行排序  最主要是 nameserver 关键字，如果没指定 nameserver 就找不到 DNS 服务器，其它关键字是可选的。
domain centoscn.com search www.centocn.com www.wgjlb.com nameserver 202.96.128.86 nameserver 202.96.128.166 /etc/host.conf #  解析器查询顺序配置文件
# 表示先查询本地 hosts 文件，如果没有结果，再尝试查找 BIND dns 服务器 order hosts bind </description>
    </item>
    
    <item>
      <title>4.3 关注项目</title>
      <link>https://ikingye.github.io/study-network/docs/appendix/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/appendix/attention/</guid>
      <description>关注 #  其他 #  netty/netty #  Netty project - an event-driven asynchronous network application framework http://netty.io/
libuv/libuv #  Cross-platform asynchronous I/O https://libuv.org/
panjf2000/gnet #  gnet 是一个基于事件驱动的高性能和轻量级网络框架。它直接使用 epoll 和 kqueue 系统调用而非标准 Go 网络包：net 来构建网络应用，它的工作原理类似两个开源的网络库：netty/netty 和 libuv/libuv 。
gnet 设计开发的初衷不是为了取代 Go 的标准网络库：net，而是为了创造出一个类似于 antirez/redis 、haproxy/haproxy 能高效处理网络包的 Go 语言网络服务器框架。
gnet 的卖点在于它是一个高性能、轻量级、非阻塞的纯 Go 实现的传输层（TCP/UDP/Unix Domain Socket）网络框架，开发者可以使用 gnet 来实现自己的应用层网络协议 (HTTP、RPC、Redis、WebSocket 等等)，从而构建出自己的应用层网络应用：比如在 gnet 上实现 HTTP 协议就可以创建出一个 HTTP 服务器 或者 Web 开发框架，实现 Redis 协议就可以创建出自己的 Redis 服务器等等。</description>
    </item>
    
    <item>
      <title>HTTP</title>
      <link>https://ikingye.github.io/study-network/docs/basic/protocol/http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/basic/protocol/http/</guid>
      <description>HTTP #  </description>
    </item>
    
    <item>
      <title>SSL</title>
      <link>https://ikingye.github.io/study-network/docs/basic/protocol/ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/basic/protocol/ssl/</guid>
      <description>SSL #   SSL，Secure Socket Layer，安全套接字层 TLS，Transport Layer Security，传输层安全协议   握手流程 #   Client-hello 阶段 Server-hello 阶段   版本 #   1994 年，NetScape 公司设计了 SSL 协议（Secure Sockets Layer）的 1.0 版，但是未发布。 1995 年，NetScape 公司发布 SSL 2.0 版，很快发现有严重漏洞。 1996 年，SSL 3.0 版问世，得到大规模应用。 1999 年，互联网标准化组织 ISOC 接替 NetScape 公司，发布了 SSL 的升级版 TLS 1.0 版。 2006 年和 2008 年，TLS 进行了两次升级，分别为 TLS 1.1 版和 TLS 1.2 版。最新的变动是 2018 年 TLS 1.</description>
    </item>
    
    <item>
      <title>WebSocket</title>
      <link>https://ikingye.github.io/study-network/docs/basic/protocol/websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/basic/protocol/websocket/</guid>
      <description>WebSocket #  WebSocket 的目标是在一个单独的持久连接上提供全双工、双向通信。
在 Javascript 创建了 Web Socket 之后，会有一个 HTTP 请求发送到浏览器以发起连接。 在取得服务器响应后，建立的连接会将 HTTP 升级为 WebSocket 协议。
由于 WebSocket 使用自定义的协议，所以 URL 模式也略有不同。
未加密的连接不再是 http://，而是 ws://; 加密的连接也不是 https://，而是 wss://。
使用自定义协议而非 HTTP 协议的好处是，能够在客户端和服务器之间发送非常少量的数据，而不必担心 HTTP 那样字节级的开销。
由于传递的数据包很小，所以 WebSocket 非常适合移动应用。
特点 #   可以发送文本，也可以发送二进制数据。 没有同源限制，客户端可以与任意服务器通信。  参考：
 推送技术 阮一峰 - WebSocket 教程  </description>
    </item>
    
    <item>
      <title>HTTPs</title>
      <link>https://ikingye.github.io/study-network/docs/basic/protocol/https/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/basic/protocol/https/</guid>
      <description>HTTPs #  从 HTTP 切换到 HTTPs 需要几步 #   EVALUATE YOUR WEBSITE FOR SECURITY RISKS PERFORM FULL WEBSITE BACKUP MAKE THE RIGHTCERTIFICATE CHOICE INSTALL AND TESTCERTIFICATES REMOVE MIXED CONTENT MAINTAIN CERTIFICATE COMPLIANCE REDIRECT HTTP TRAFFIC TO HTTPS IMPLEMENT AN AUTOMATED SCANNING SYSTEM SECURE YOUR COOKIES IMPLEMENT HTTP STRICT TRANSPORT SECURITY  参考
 10 STEPS TO SWITCH FROM HTTP TO HTTPS  </description>
    </item>
    
  </channel>
</rss>