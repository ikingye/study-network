<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>首页 on 网络学习笔记</title>
    <link>https://kingye.me/study-network/</link>
    <description>Recent content in 首页 on 网络学习笔记</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://kingye.me/study-network/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>4.1 教程</title>
      <link>https://kingye.me/study-network/docs/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-network/docs/appendix/tutorial/</guid>
      <description>教程 #  基础 #  进阶 #  tonydeng/sdn-handbook #  SDN 手册</description>
    </item>
    
    <item>
      <title>curl</title>
      <link>https://kingye.me/study-network/docs/basic/cmd/curl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-network/docs/basic/cmd/curl/</guid>
      <description>curl #  curl format #  curl -w @curl-format -o /dev/null -s http://www.baidu.com
 time_appconnect: %{time_appconnect} （从开始到ssl/ssh连接完成）\n  time_connect: %{time_connect} （从开始到tcp建连完成）\n  time_namelookup: %{time_namelookup} （从开始到域名解析完成）\n  time_pretransfer: %{time_pretransfer} （从开始到文件传输即将开始，不包括服务器处理时间）\n  time_redirect: %{time_redirect} （包括最后一次传输前的所有重定向，包括DNS解析，连接，预传输）\n time_starttransfer: %{time_starttransfer} （从开始到第一个byte即将传输，包括服务器处理时间）\n  ----------\n  DNS 解析耗时: %{time_namelookup} \n  tcp 建连耗时: %{time_connect} - %{time_namelookup} \n  ssl 耗时: %{time_appconnect} - %{time_connect} \n  服务器处理耗时: %{time_starttransfer} - %{time_pretransfer} \n  ----------\n  time_total: %{time_total} （全部时间；以上单位都是 秒）\n\n  详细参考: https://curl.</description>
    </item>
    
    <item>
      <title>iptables</title>
      <link>https://kingye.me/study-network/docs/basic/cmd/iptables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-network/docs/basic/cmd/iptables/</guid>
      <description>iptables #  Linux 的包过滤功能，即 Linux 防火墙， 它由 netfilter 和 iptables 两个组件组成。
netfilter 组件位于内核空间，是内核的一部分，由一些信息包过滤表组成，这些表包含内核用来控制信息包过滤处理的规则集。
iptables 组件是一种工具，位于用户空间，它使插入、修改和除去信息包过滤表中的规则变得容易。
 iptables 是 linux 系统下用来配置 netfilter 子系统的一个 client tool。
iptables 其实不是真正的防火墙，我们可以把它理解成一个客户端代理，用户通过 iptables 这个代理，将用户的安全设定执行到对应的 &amp;ldquo;安全框架&amp;rdquo; 中， 这个 &amp;ldquo;安全框架&amp;rdquo; 才是真正的防火墙，这个框架的名字叫 netfilter。
配套的常用命令有：
 iptables: 对表、链、规则进行配置 iptables-save: dump 已配置的规则，可以用 &amp;gt; 重定向到一个文件中 iptables-restore: 从之前导出的 iptable 规则配置文件加载规则。   原理 #   一个数据包进入网卡时，它首先进入 PREROUTING 链，内核根据数据包目的 IP 判断是否需要转发出去 如果数据包就是进入本机的，它就会沿着图向下移动，到达 INPUT 链 数据包到了 INPUT 链后，任何进程都会收到它。 如果数据包是要转发出去的，且内核允许转发，数据包就会如图所示向右移动，经过 FORWARD 链， 然后到达 POSTROUTING 链输出。 本机上运行的程序可以发送数据包，这些数据包会经 过 OUTPUT 链 然后到达 POSTROUTING 链输出   状态 #  ESTABLISHED #  状态 ESTABLISHED 指出该信息包属于已建立的连接，该连接一直用于发送和接收信息包并且完全有效。</description>
    </item>
    
    <item>
      <title>netfilter</title>
      <link>https://kingye.me/study-network/docs/basic/cmd/netfilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-network/docs/basic/cmd/netfilter/</guid>
      <description>netfilter #  </description>
    </item>
    
    <item>
      <title>TCP</title>
      <link>https://kingye.me/study-network/docs/basic/protocol/tcp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-network/docs/basic/protocol/tcp/</guid>
      <description>TCP #  TCP 报文格式 #   序号：Seq 序号，占 32 位，用来标识从 TCP 源端向目的端发送的字节流，发起方发送数据时对此进行标记。 确认序号：Ack 序号，占 32 位，只有 ACK 标志位为 1 时，确认序号字段才有效，Ack=Seq+1。 标志位：共 6 个，即 URG、ACK、PSH、RST、SYN、FIN 等，具体含义如下：  URG：紧急指针（urgent pointer）有效。 ACK：确认序号有效。 PSH：接收方应该尽快将这个报文交给应用层。 RST：重置连接。 SYN：发起一个新连接。 FIN：释放一个连接。    三次握手 #  四次挥手 #  实际中还会出现同时发起主动关闭的情况
 TCP 有限状态机 #  The TCP Finite State Machine (FSM)

 TCP 状态变迁图 #  
 TCP 是全双工的 #   TCP 的 RTT 算法 #  经典算法（RFC793） #    首先，先采样 RTT，记下最近好几次的 RTT 值。</description>
    </item>
    
    <item>
      <title>VXLAN</title>
      <link>https://kingye.me/study-network/docs/basic/protocol/vxlan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-network/docs/basic/protocol/vxlan/</guid>
      <description>VXLAN #  overlay 的核心其实就是打隧道（tunnel）
 突破 VLAN 的最多 4096 个终端的数量限制，以满足大规模云计算数据中心的需求 解决 STP 在大型 网路设备带宽浪费和收敛性能变慢的缺陷 解决 ToR (Top of Rack) 交换机 MAC 表耗尽问题 VXLAN 最大的贡献，就是实现了网络的扁平化管理，IP 地址不再与特定的 Site（某个数据中心）强行绑定在一起。  NOV3 技术（Network Virtualization Overlays）的实现原理其实非常简单，
 VxLAN: MAC in UDP NvGRE: MAC in GRE STT: MAC in TCP（伪 TCP）  </description>
    </item>
    
    <item>
      <title>Wireshark</title>
      <link>https://kingye.me/study-network/docs/advanced/tool/wireshark/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-network/docs/advanced/tool/wireshark/</guid>
      <description>Wireshark #  安装 #  https://www.wireshark.org/download.html
yum install -y wireshark  教程 #  参考：
 Wireshark User’s Guide 命令 wireshark - Interactively dump and analyze network traffic  Capture filter #  参考：
 4.10. Filtering while capturing Capture Filters wiki Man page of PCAP-FILTER  Display filter #  参考：
 Chapter 6. Working With Captured Packets wireshark-filter - Wireshark display filter syntax and reference  tshark #  教程：</description>
    </item>
    
    <item>
      <title>UDP</title>
      <link>https://kingye.me/study-network/docs/basic/protocol/udp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-network/docs/basic/protocol/udp/</guid>
      <description>UDP #  </description>
    </item>
    
    <item>
      <title>4.2 面试题</title>
      <link>https://kingye.me/study-network/docs/appendix/interview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-network/docs/appendix/interview/</guid>
      <description>计算机网络面试题 #  基础题 #  进阶题 #  </description>
    </item>
    
    <item>
      <title>DNS</title>
      <link>https://kingye.me/study-network/docs/basic/protocol/dns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-network/docs/basic/protocol/dns/</guid>
      <description>DNS #  /etc/hosts #  hosts 文件是 Linux 系统中一个负责 IP 地址与域名快速解析的文件
/etc/resolv.conf #  该文件是 DNS 域名解析的配置文件，它的格式很简单， 每行以一个关键字开头，后接配置参数。
resolv.conf 的关键字主要有四个：
 nameserver # 定义 DNS 服务器的 IP 地址 domain # 定义本地域名 search # 定义域名的搜索列表 sortlist # 对返回的域名进行排序  最主要是 nameserver 关键字，如果没指定 nameserver 就找不到 DNS 服务器，其它关键字是可选的。
domain centoscn.com search www.centocn.com www.wgjlb.com nameserver 202.96.128.86 nameserver 202.96.128.166 /etc/host.conf #  解析器查询顺序配置文件
# 表示先查询本地 hosts 文件，如果没有结果，再尝试查找 BIND dns 服务器 order hosts bind </description>
    </item>
    
    <item>
      <title>4.3 关注项目</title>
      <link>https://kingye.me/study-network/docs/appendix/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-network/docs/appendix/attention/</guid>
      <description>关注 #  其他 #  netty/netty #  Netty project - an event-driven asynchronous network application framework http://netty.io/
libuv/libuv #  Cross-platform asynchronous I/O https://libuv.org/
panjf2000/gnet #  gnet 是一个基于事件驱动的高性能和轻量级网络框架。它直接使用 epoll 和 kqueue 系统调用而非标准 Go 网络包：net 来构建网络应用，它的工作原理类似两个开源的网络库：netty/netty 和 libuv/libuv 。
gnet 设计开发的初衷不是为了取代 Go 的标准网络库：net，而是为了创造出一个类似于 antirez/redis 、haproxy/haproxy 能高效处理网络包的 Go 语言网络服务器框架。
gnet 的卖点在于它是一个高性能、轻量级、非阻塞的纯 Go 实现的传输层（TCP/UDP/Unix Domain Socket）网络框架，开发者可以使用 gnet 来实现自己的应用层网络协议 (HTTP、RPC、Redis、WebSocket 等等)，从而构建出自己的应用层网络应用：比如在 gnet 上实现 HTTP 协议就可以创建出一个 HTTP 服务器 或者 Web 开发框架，实现 Redis 协议就可以创建出自己的 Redis 服务器等等。</description>
    </item>
    
    <item>
      <title>HTTP</title>
      <link>https://kingye.me/study-network/docs/basic/protocol/http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-network/docs/basic/protocol/http/</guid>
      <description>HTTP #  教程 #  EZLippi/Tinyhttpd #  Tinyhttpd 是 J. David Blackstone 在 1999 年写的一个不到 500 行的超轻量型 Http Server，用来学习非常不错，可以帮助我们真正理解服务器程序的本质。 官网:http://tinyhttpd.sourceforge.net</description>
    </item>
    
    <item>
      <title>SSL</title>
      <link>https://kingye.me/study-network/docs/basic/protocol/ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-network/docs/basic/protocol/ssl/</guid>
      <description>SSL #   SSL，Secure Socket Layer，安全套接字层 TLS，Transport Layer Security，传输层安全协议   版本 #   1994 年，NetScape 公司设计了 SSL 协议（Secure Sockets Layer）的 1.0 版，但是未发布。 1995 年，NetScape 公司发布 SSL 2.0 版，很快发现有严重漏洞。 1996 年，SSL 3.0 版问世，得到大规模应用。 1999 年，互联网标准化组织 ISOC 接替 NetScape 公司，发布了 SSL 的升级版 TLS 1.0 版。 2006 年和 2008 年，TLS 进行了两次升级，分别为 TLS 1.1 版和 TLS 1.2 版。最新的变动是 2018 年 TLS 1.3 的修订版。     Protocol Published Status     SSL 1.</description>
    </item>
    
    <item>
      <title>WebSocket</title>
      <link>https://kingye.me/study-network/docs/basic/protocol/websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-network/docs/basic/protocol/websocket/</guid>
      <description>WebSocket #  WebSocket 的目标是在一个单独的持久连接上提供全双工、双向通信。
在 Javascript 创建了 Web Socket 之后，会有一个 HTTP 请求发送到浏览器以发起连接。 在取得服务器响应后，建立的连接会将 HTTP 升级为 WebSocket 协议。
由于 WebSocket 使用自定义的协议，所以 URL 模式也略有不同。
未加密的连接不再是 http://，而是 ws://; 加密的连接也不是 https://，而是 wss://。
使用自定义协议而非 HTTP 协议的好处是，能够在客户端和服务器之间发送非常少量的数据，而不必担心 HTTP 那样字节级的开销。
由于传递的数据包很小，所以 WebSocket 非常适合移动应用。
特点 #   可以发送文本，也可以发送二进制数据。 没有同源限制，客户端可以与任意服务器通信。  参考：
 推送技术 阮一峰 - WebSocket 教程  </description>
    </item>
    
    <item>
      <title>HTTPs</title>
      <link>https://kingye.me/study-network/docs/basic/protocol/https/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-network/docs/basic/protocol/https/</guid>
      <description>HTTPs #  从 HTTP 切换到 HTTPs 需要几步 #   EVALUATE YOUR WEBSITE FOR SECURITY RISKS PERFORM FULL WEBSITE BACKUP MAKE THE RIGHTCERTIFICATE CHOICE INSTALL AND TESTCERTIFICATES REMOVE MIXED CONTENT MAINTAIN CERTIFICATE COMPLIANCE REDIRECT HTTP TRAFFIC TO HTTPS IMPLEMENT AN AUTOMATED SCANNING SYSTEM SECURE YOUR COOKIES IMPLEMENT HTTP STRICT TRANSPORT SECURITY  参考
 10 STEPS TO SWITCH FROM HTTP TO HTTPS  </description>
    </item>
    
    <item>
      <title>CXL</title>
      <link>https://kingye.me/study-network/docs/basic/cxl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-network/docs/basic/cxl/</guid>
      <description>CXL #  Compute Express Link
 以下是 CXL 和 PCIe 之间的一些区别：
 带宽：CXL 提供比 PCIe 高得多的带宽。该标准的最新版本 CXL 3.0 每通道提供高达 64 GT/s 的带宽，是 PCIe 5.0 带宽的 2 倍。这使得 CXL 成为需要快速传输大量数据的应用程序的更好选择，例如人工智能和机器学习。 可扩展性：CXL 的设计比 PCIe 更具可扩展性。PCIe 仅限于最多 16 个通道，而 CXL 最多可支持 32 个通道。这意味着 CXL 可以用来连接更多的设备并提供比 PCIe 更多的带宽。 内存共享：CXL 支持设备之间的内存共享，使它们能够更有效地协同工作。这可以提高性能并减少通过互连在设备之间传输数据的需要。 兼容性：PCIe 是一种广泛采用的标准，与多种设备兼容，而 CXL 是一种较新的标准，仍在不断获得采用。这意味着 CXL 兼容设备可能需要一些时间才能广泛使用。成本：由于标准的附加功能和特性，支持 CXL 的设备可能比支持 PCIe 的设备更昂贵。  最终，CXL 和 PCIe 之间的选择将取决于应用程序的具体需求和要求，以及支持每个标准的设备的可用性和兼容性。</description>
    </item>
    
    <item>
      <title>PCIe</title>
      <link>https://kingye.me/study-network/docs/basic/pcie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-network/docs/basic/pcie/</guid>
      <description>PCIe #  Peripheral Component Interconnect Express，简称 PCI-E，官方简称 PCIe
是计算机总线的一个重要分支，它沿用既有的 PCI 编程概念及信号标准，并且构建了更加高速的串行通信系统标准。
 PCIe 拥有更快的速率，所以几乎取代了以往所有的内部总线（包括 AGP 和 PCI）。现在英特尔和 AMD 已采用单芯片组技术，取代原有的南桥／北桥方案。  发展历史 #   ISA (Industry Standard Architecture)  第一代 ISA 插槽出现在第一代 IBM PC XT 机型上（1981），作为现代 PC 的盘古之作，8 位的 ISA 提供了 4.77MB/s 的带宽（或传输率）。   MCA (Micro Channel Architecture) EISA (Extended Industry Standard Architecture) VLB (VESA Local Bus) PCI (Peripheral Component Interconnect)  Intel 在 1992 年提出 PCI（Peripheral Component Interconnect）总线协议，并召集其它的小伙伴组成了名为 PCI-SIG (PCI Special Interest Group)（PCI 特殊兴趣组 J）的企业联盟。从那以后这个组织就负责 PCI 和其继承者们（PCI-X 和 PCIe）的标准制定和推广。   PCI-X (Peripheral Component Interconnect eXtended) AGP (Accelerated Graphics Port) PCI Express (Peripheral Component Interconnect Express)  </description>
    </item>
    
    <item>
      <title>RoCE 网络</title>
      <link>https://kingye.me/study-network/docs/basic/roce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-network/docs/basic/roce/</guid>
      <description>RoCE 网络 #  分布式存储中常用的网络协议
 Infiniband（IB）：常用于 DPC 场景中的存储前端网络 RoCE：常用于存储后端网络 TCP/IP：常用于业务网络  RDMA #   传统的 TCP/IP 网络通信是通过内核发送消息，这种通信方式存在很高的数据移动和数据复制的开销。 RDMA (RemoteDirect Memory Access) 技术全称远程直接内存访问，就是为了解决网络传输中服务器端数据处理的延迟而产生的。  RDMA 技术能直接通过网络接口访问内存数据，无需操作系统内核的介入。这允许高吞吐、低延迟的网络通信，尤其适合在大规模并行计算机集群中使用。    目前有三种 RDMA 网络，分别是 Infiniband（IB）、RoCE (RDMA over Converged Ethernet)、iWARP  Infiniband 是一种专为 RDMA 设计的网络，从硬件级别保证可靠传输 ，技术先进，但是成本高昂  InfiniBand：设计之初就考虑了 RDMA，从硬件级别保证可靠传输，提供更高的带宽和更低的时延。但是成本高，需要支持 IB 网卡和交换机。   RoCE 和 iWARP 都是基于以太网的 RDMA 技术，这使高速、超低延时、极低 CPU 使用率的 RDMA 技术得以部署在目前使用最广泛的以太网上  iWARP：基于 TCP 的 RDMA 网络，利用 TCP 达到可靠传输。相比 RoCE，在大型组网的情况下，iWARP 的大量 TCP 连接会占用大量的内存资源，对系统规格要求更高。可以使用普通的以太网交换机，但是需要支持 iWARP 的网卡。     RoCE：基于 Ethernet 做 RDMA，消耗的资源比 iWARP 少，支持的特性比 iWARP 多。可以使用普通的以太网交换机，但是需要支持 RoCE 的网卡。      InfiniBand iWARP RoCE     成本 高 中 低   性能 最好 稍差（受 TCP 影响） 与 InfiniBand 相当   稳定性 好 差 较好   交换机 IB 交换机 以太网交换机 以太网交换机     RoCE #  RoCE 协议有 RoCEv1 和 RoCEv2 两个版本</description>
    </item>
    
  </channel>
</rss>
