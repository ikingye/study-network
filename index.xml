<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>首页 on 网络学习笔记</title>
    <link>https://ikingye.github.io/study-network/</link>
    <description>Recent content in 首页 on 网络学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ikingye.github.io/study-network/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>教程</title>
      <link>https://ikingye.github.io/study-network/docs/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/appendix/tutorial/</guid>
      <description>教程 基础 进阶 高阶 </description>
    </item>
    
    <item>
      <title>基础</title>
      <link>https://ikingye.github.io/study-network/docs/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/appendix/interview/basic/</guid>
      <description>基础面试题 </description>
    </item>
    
    <item>
      <title>进阶</title>
      <link>https://ikingye.github.io/study-network/docs/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/appendix/interview/advanced/</guid>
      <description>进阶面试题 </description>
    </item>
    
    <item>
      <title>高阶</title>
      <link>https://ikingye.github.io/study-network/docs/appendix/interview/expert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/appendix/interview/expert/</guid>
      <description>高阶面试题 </description>
    </item>
    
    <item>
      <title>DNS</title>
      <link>https://ikingye.github.io/study-network/docs/basic/protocol/dns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/basic/protocol/dns/</guid>
      <description>DNS /etc/hosts hosts 文件是 Linux 系统中一个负责 IP 地址与域名快速解析的文件
/etc/resolv.conf 该文件是 DNS 域名解析的配置文件，它的格式很简单， 每行以一个关键字开头，后接配置参数。
resolv.conf 的关键字主要有四个：
 nameserver #定义 DNS 服务器的 IP 地址 domain #定义本地域名 search #定义域名的搜索列表 sortlist #对返回的域名进行排序  最主要是 nameserver 关键字，如果没指定 nameserver 就找不到 DNS 服务器，其它关键字是可选的。
domain centoscn.com search www.centocn.com www.wgjlb.com nameserver 202.96.128.86 nameserver 202.96.128.166 /etc/host.conf 解析器查询顺序配置文件
# 表示先查询本地 hosts 文件，如果没有结果，再尝试查找 BIND dns 服务器 order hosts bind </description>
    </item>
    
    <item>
      <title>HTTP</title>
      <link>https://ikingye.github.io/study-network/docs/basic/protocol/http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/basic/protocol/http/</guid>
      <description>HTTP </description>
    </item>
    
    <item>
      <title>iptables</title>
      <link>https://ikingye.github.io/study-network/docs/basic/cmd/iptables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/basic/cmd/iptables/</guid>
      <description>iptables Linux 的包过滤功能，即 Linux 防火墙， 它由 netfilter 和 iptables 两个组件组成。 netfilter 组件也称为内核空间，是内核的一部分，由一些信息包过滤表组成，这些表包含内核用来控制信息包过滤处理的规则集。 iptables 组件是一种工具，位于用户空间，它使插入、修改和除去信息包过滤表中的规则变得容易。
原理  一个数据包进入网卡时，它首先进入 PREROUTING 链，内核根据数据包目的 IP 判断是否需要转发出去 如果数据包就是进入本机的，它就会沿着图向下移动，到达 INPUT 链 数据包到了 INPUT 链后，任何进程都会收到它。 如果数据包是要转发出去的，且内核允许转发，数据包就会如图所示向右移动，经过 FORWARD 链， 然后到达 POSTROUTING 链输出。 本机上运行的程序可以发送数据包，这些数据包会经 过 OUTPUT 链 然后到达 POSTROUTING 链输出   状态 ESTABLISHED 状态 ESTABLISHED 指出该信息包属于已建立的连接，该连接一直用于发送和接收信息包并且完全有效。
INVALID INVALID 状态指出该信息包与任何已知的流或连接都不相关联，它可能包含错误的数据或头。
NEW 状态 NEW 意味着该信息包已经或将启动新的连接，或者它与尚未用于发送和接收信息包的连接相关联。
RELATED RELATED 表示该信息包正在启动新连接，以及它与已建立的连接相关联。
 规则 /rules  规则（rules）其实就是网络管理员预定义的条件， 规则一般的定义为 &amp;ldquo;如果数据包头符合这样的条件，就这样处理这个数据包&amp;rdquo;。 规则存储在内核空间的信息包过滤表中， 这些规则分别指定了**源地址、目的地址、传输协议（如 TCP、UDP、ICMP）和服务类型（如 HTTP、FTP 和 SMTP）**等。 当数据包与规则匹配时，iptables 就根据规则所定义的方法来处理这些数据包，如放行（accept）、拒绝（reject）和丢弃（drop）等。 配置防火墙的主要工作就是添加、修改和删除这些规则。   基础命令 iptables [ -t 表名] 命令选项 [链名] [条件匹配] [-j 目标动作或跳转]</description>
    </item>
    
    <item>
      <title>mTLS</title>
      <link>https://ikingye.github.io/study-network/docs/basic/protocol/tls/mtls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/basic/protocol/tls/mtls/</guid>
      <description>mTLS </description>
    </item>
    
    <item>
      <title>netfilter</title>
      <link>https://ikingye.github.io/study-network/docs/basic/cmd/netfilter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/basic/cmd/netfilter/</guid>
      <description>netfilter </description>
    </item>
    
    <item>
      <title>TCP</title>
      <link>https://ikingye.github.io/study-network/docs/basic/protocol/tcp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/basic/protocol/tcp/</guid>
      <description>TCP </description>
    </item>
    
    <item>
      <title>UDP</title>
      <link>https://ikingye.github.io/study-network/docs/basic/protocol/udp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/basic/protocol/udp/</guid>
      <description>UDP </description>
    </item>
    
    <item>
      <title>关注</title>
      <link>https://ikingye.github.io/study-network/docs/appendix/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-network/docs/appendix/attention/</guid>
      <description>关注 其他 netty/netty Netty project - an event-driven asynchronous network application framework http://netty.io/
libuv/libuv Cross-platform asynchronous I/O https://libuv.org/
panjf2000/gnet gnet 是一个基于事件驱动的高性能和轻量级网络框架。它直接使用 epoll 和 kqueue 系统调用而非标准 Go 网络包：net 来构建网络应用，它的工作原理类似两个开源的网络库：netty/netty 和 libuv/libuv 。
gnet 设计开发的初衷不是为了取代 Go 的标准网络库：net，而是为了创造出一个类似于 antirez/redis 、haproxy/haproxy 能高效处理网络包的 Go 语言网络服务器框架。
gnet 的卖点在于它是一个高性能、轻量级、非阻塞的纯 Go 实现的传输层（TCP/UDP/Unix Domain Socket）网络框架，开发者可以使用 gnet 来实现自己的应用层网络协议 (HTTP、RPC、Redis、WebSocket 等等)，从而构建出自己的应用层网络应用：比如在 gnet 上实现 HTTP 协议就可以创建出一个 HTTP 服务器 或者 Web 开发框架，实现 Redis 协议就可以创建出自己的 Redis 服务器等等。
gnet 衍生自另一个项目：tidwall/evio ，但拥有更丰富的功能特性，且性能远胜之。
tidwall/evio Fast event-loop networking for Go</description>
    </item>
    
  </channel>
</rss>